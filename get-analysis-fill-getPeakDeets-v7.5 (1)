(function () {
  "use strict";

  const groups = [
    "B1A",
    "B1B",
    "C1A",
    "C1B",
    "C2A",
    "C2B",
    "C3A",
    "C3B",
    "C4A",
    "C4B",
    "C5",
  ];

  kintone.events.on("app.record.index.show", function (event) {
    setTimeout(() => {
      const getButton = document.getElementById("getButton");
      if (!getButton) return;

      getButton.onclick = async function () {
        const loadingEl = document.getElementById("loading");
        if (loadingEl) loadingEl.style.display = "block"; // ðŸŸ¡ Show loading
        try {
          const objList = [];

          // Step 1: Clear threeNvalues
          for (let j = 0; j < 6; j++) {
            groups.forEach((group) => {
              const sb = document.getElementById(
                `${group.toLowerCase()}SbDate${j + 1}`
              );
              const sn = document.getElementById(
                `${group.toLowerCase()}SnDate${j + 1}`
              );
              const ag = document.getElementById(
                `${group.toLowerCase()}AgDate${j + 1}`
              );
              const ind = document.getElementById(
                `${group.toLowerCase()}InDate${j + 1}`
              );
              const cd = document.getElementById(
                `${group.toLowerCase()}CdDate${j + 1}`
              );
              const pb = document.getElementById(
                `${group.toLowerCase()}PbDate${j + 1}`
              );
              const sbEfficiency = document.getElementById(
                `${group.toLowerCase()}SbEfficiencyDate${j + 1}`
              );
              const drNo = document.getElementById("drNo");
              if (sb) clear(sb);
              if (sn) clear(sn);
              if (ag) clear(ag);
              if (ind) clear(ind);
              if (cd) clear(cd);
              if (pb) clear(pb);
              if (sbEfficiency) clear(sbEfficiency);
              if (drNo) clear(drNo);
            });
          }

          // Step 2: Prepare dates & filters
          const allFilters = [];
          const voltagePeakPromises = [];
          const inputDates = [];

          for (let i = 0; i < 6; i++) {
            const inputDate = document.getElementById(`inputDate${i + 1}`);
            if (!inputDate || !inputDate.value) continue;
            inputDates.push({ index: i, date: new Date(inputDate.value) });

            const isoDate = new Date(inputDate.value)
              .toISOString()
              .split("T")[0];
            for (const group of groups) {
              voltagePeakPromises.push(fetchVoltagePeak(747, isoDate, group));
            }
          }

          const allVoltagePeakResult = await Promise.all(voltagePeakPromises);
          let resultIndex = 0;

          for (const { index: i, date } of inputDates) {
            const formattedDates = formatDate(date);
            const dateFilters = [
              formattedDates["mm/dd/yy"],
              formattedDates["m/d/yy"],
              formattedDates["m/dd/yy"],
              formattedDates["m/dd/yyyy"],
              formattedDates["mm/dd/yyyy"],
            ]
              .map((d) => `Text like "${d}"`)
              .join(" or ");

            for (const group of groups) {
              const sbEl = document.getElementById(
                `${group.toLowerCase()}SbDate${i + 1}`
              );
              const snEl = document.getElementById(
                `${group.toLowerCase()}SnDate${i + 1}`
              );
              const agEl = document.getElementById(
                `${group.toLowerCase()}AgDate6`
              );
              const cdEl = document.getElementById(
                `${group.toLowerCase()}CdDate6`
              );
              const indEl = document.getElementById(
                `${group.toLowerCase()}InDate6`
              );
              const pbEl = document.getElementById(
                `${group.toLowerCase()}PbDate6`
              );
              const sbEfficiencyEl = document.getElementById(
                `${group.toLowerCase()}SbEfficiencyDate6`
              );
              const drNoEl = document.getElementById("drNo");
              const outputEl = document.getElementById(
                `${group.toLowerCase()}Output`
              );
              const temperatureEl = document.getElementById(
                `${group.toLowerCase()}Temperature`
              );
              const targetPeakEl = document.getElementById(
                `${group.toLowerCase()}Peak`
              );
              const actualPeakEl = document.getElementById(
                `${group.toLowerCase()}Actual`
              );
              const ampereEl = document.getElementById(
                `${group.toLowerCase()}Ampere`
              );
              const remarksEl = document.getElementById(
                `${group.toLowerCase()}Remarks`
              );

              const baseFilter = `ãƒ‰ãƒ­ãƒƒãƒ—ãƒ€ã‚¦ãƒ³ in ("ER") and Text like "${group}" and (${dateFilters})`;
              const operation = allVoltagePeakResult[resultIndex]?.operation;
              const hasOutput = allVoltagePeakResult[resultIndex]?.hasOutput;
              const drNo = allVoltagePeakResult[resultIndex]?.drNo;
              const outputQty = allVoltagePeakResult[resultIndex]?.outputQty;
              const temperature =
                allVoltagePeakResult[resultIndex]?.temperature;
              const targetPeak = allVoltagePeakResult[resultIndex]?.targetPeak;
              const actualPeak = allVoltagePeakResult[resultIndex]?.actualPeak;
              const ampere = allVoltagePeakResult[resultIndex]?.ampere;
              const remarks = allVoltagePeakResult[resultIndex]?.remarks;

              resultIndex++;

              allFilters.push({
                index: i,
                group,
                sbElement: { text: sbEl, color: hasOutput ? "red" : "black" },
                snElement: { text: snEl, color: hasOutput ? "red" : "black" },
                agElement: agEl,
                cdElement: cdEl,
                indElement: indEl,
                pbElement: pbEl,
                sbEfficiencyElement: sbEfficiencyEl,
                filter: baseFilter,
                operation,
                hasOutput,
                drNoElement: { text: drNoEl, value: drNo },
                outputElement: { text: outputEl, value: outputQty },
                temperatureElement: {
                  text: temperatureEl,
                  value: temperature ? temperature + "Â°C" : "-",
                  color: temperature > 45 ? "red" : "black",
                  fill: temperature > 45 ? "#FCE4D6" : "white",
                },
                targetPeakElement: {
                  text: targetPeakEl,
                  value: targetPeak > 0 ? targetPeak + "v" : "-",
                  color: "#0070C0",
                },
                actualPeakElement: {
                  text: actualPeakEl,
                  value: actualPeak > 0 ? actualPeak + "v" : "-",
                  color: "#0070C0",
                },
                ampereElement: { text: ampereEl, value: ampere },
                remarksElement: { text: remarksEl, value: remarks },
              });
            }
          }

          // Step 3: Fetch all records in parallel
          const recordPromises = allFilters.map(({ filter }) =>
            fetchRecords(330, filter)
          );
          const recordResults = await Promise.all(recordPromises);

          //DRNO
          const day5Result = allFilters.filter((item) => item.index == 4);
          const day6Result = allFilters.filter((item) => item.index == 5);

          const match =
            day5Result.find((item) => item.drNoElement?.value) ||
            day6Result.find((item) => item.drNoElement?.value);

          if (match) {
            match.drNoElement.text.textContent = match.drNoElement.value;
          } else {
            // fallback to updating any default DR No element if needed
            const fallbackDrNoEl = document.getElementById("drNo");
            if (fallbackDrNoEl) fallbackDrNoEl.textContent = "-";
          }

          // Step 4: Process results
          for (let i = 0; i < allFilters.length; i++) {
            const {
              sbElement,
              snElement,
              agElement,
              cdElement,
              indElement,
              pbElement,
              sbEfficiencyElement,
              group,
              operation,
              hasOutput,
              drNoElement,
              outputElement,
              temperatureElement,
              targetPeakElement,
              actualPeakElement,
              ampereElement,
              remarksElement,
            } = allFilters[i];
            const result = recordResults[i];

            const underline = operation === "4N";
            const type = result?.Type ? result.Type.toLowerCase() : "blank";
            const valueSb = formatResult(result?.Number_9, 4);
            const valueSn = formatResult(result?.Number, 4);
            const valueAg = formatResult(result?.Number_12, 4);
            const valueInd = formatResult(result?.Number_3, 4);
            const valueCd = formatResult(result?.Number_2, 4);
            const valuePb = formatResult(result?.Number_13, 4);
            let valueSbEfficiency;
            if (valueSb === "-" || valuePb === "-") {
              valueSbEfficiency = "-";
            } else {
              valueSbEfficiency = (
                parseFloat(valueSb) * 10000 -
                parseFloat(valuePb) * 1.65
              ).toFixed(1);
            }

            const fill = determineFillColor(type);

            const applyStyles = (
              el,
              value,
              color = "black",
              fill = "white",
              underline = false
            ) => {
              if (!el) return;
              el.textContent = value;
              el.style.color = color;
              if (fill.startsWith("linear-gradient")) {
                el.style.background = fill;
              } else {
                el.style.backgroundColor = fill;
              }
              el.style.setProperty(
                "text-decoration",
                underline && value !== "-" ? "underline" : "none",
                "important"
              );
            };
            const peakParameters = [
              "outputElement",
              "drNoElement",
              "temperatureElement",
              "targetPeakElement",
              "actualPeakElement",
              "ampereElement",
              "remarksElement",
            ];
            if (
              result?.Text?.includes(`${group}/`) &&
              !peakParameters.some((param) => {
                result.Text.includes(param);
              })
            ) {
              const secondGroup = allFilters[i + 1];
              //first group
              applyStyles(
                sbElement.text,
                valueSb,
                sbElement.color,
                fill,
                underline
              );
              applyStyles(
                snElement.text,
                valueSn,
                snElement.color,
                fill,
                underline
              );
              applyStyles(indElement, valueInd, checkPointOne(valueInd));
              applyStyles(agElement, valueAg, checkPointOne(valueAg));
              applyStyles(cdElement, valueCd, checkPointOne(valueCd));
              applyStyles(pbElement, valuePb);
              applyStyles(
                sbEfficiencyElement,
                valueSbEfficiency,
                getEfficiencyColor(valueSbEfficiency)
              );

              // copy to second group
              applyStyles(
                secondGroup?.snElement.text,
                valueSn,
                secondGroup?.snElement.color,
                fill,
                underline
              );
              applyStyles(
                secondGroup?.sbElement.text,
                valueSb,
                secondGroup?.sbElement.color,
                fill,
                underline
              );
              applyStyles(
                secondGroup?.indElement,
                valueInd,
                checkPointOne(valueInd)
              );
              applyStyles(
                secondGroup?.agElement,
                valueAg,
                checkPointOne(valueAg)
              );
              applyStyles(
                secondGroup?.cdElement,
                valueCd,
                checkPointOne(valueCd)
              );
              applyStyles(secondGroup?.pbElement, valuePb);
              applyStyles(
                secondGroup?.sbEfficiencyElement,
                valueSbEfficiency,
                getEfficiencyColor(valueSbEfficiency)
              );

              i++; // skip next
            } else {
              applyStyles(
                sbElement.text,
                valueSb,
                sbElement.color,
                fill,
                underline
              );
              applyStyles(
                snElement.text,
                valueSn,
                snElement.color,
                fill,
                underline
              );
              applyStyles(indElement, valueInd, checkPointOne(valueInd));
              applyStyles(agElement, valueAg, checkPointOne(valueAg));
              applyStyles(cdElement, valueCd, checkPointOne(valueCd));
              applyStyles(pbElement, valuePb);
              applyStyles(
                sbEfficiencyElement,
                valueSbEfficiency,
                getEfficiencyColor(valueSbEfficiency)
              );
              applyStyles(
                outputElement.text,
                formatResult(outputElement.value, 1)
              );

              applyStyles(
                temperatureElement.text,
                temperatureElement.value,
                temperatureElement.color,
                temperatureElement.fill
              );
              applyStyles(
                targetPeakElement.text,
                targetPeakElement.value,
                targetPeakElement.color
              );
              applyStyles(
                actualPeakElement.text,
                actualPeakElement.value,
                actualPeakElement.color
              );
              applyStyles(
                ampereElement.text,
                formatResult(ampereElement.value, 0)
              );
              applyStyles(
                remarksElement.text,
                remarksElement.value ? remarksElement.value : "-"
              );
            }
          }

          // Step 5: Calculate averages and std devs
          groups.forEach((element) => {
            const rsd3N = document.getElementById(
              `${element.toLowerCase()}Rsd3N`
            );
            const rsd4N = document.getElementById(
              `${element.toLowerCase()}Rsd4N`
            );
            const ave3N = document.getElementById(
              `${element.toLowerCase()}Ave3N`
            );
            const std3N = document.getElementById(
              `${element.toLowerCase()}Std3N`
            );
            const ave4N = document.getElementById(
              `${element.toLowerCase()}Ave4N`
            );
            const std4N = document.getElementById(
              `${element.toLowerCase()}Std4N`
            );
            let threeNnonZero = 0,
              threeNsum = 0,
              fourNsum = 0,
              fourNnonZero = 0;

            let raw3NstdDev = 0;
            let raw4NstdDev = 0;
            let raw3NAve = 0;
            let raw4NAve = 0;

            const threeNvalues = [];
            const fourNvalues = [];

            for (let i = 1; i <= 6; i++) {
              let numEl = document.getElementById(
                `${element.toLowerCase()}SbDate${i}`
              );
              if (numEl) {
                let num = parseFloat(numEl.textContent) || 0;
                let textDecoration =
                  window.getComputedStyle(numEl).textDecorationLine;
                if (textDecoration == "underline" && num > 0) {
                  fourNnonZero++;
                  fourNsum += num;
                  fourNvalues.push(num);
                } else if (textDecoration == "none" && num > 0) {
                  threeNnonZero++;
                  threeNsum += num;
                  threeNvalues.push(num);
                }
              }
            }
            //3N STD AVE RSD COMPUTATION
            if (ave3N)
              raw3NAve = threeNnonZero > 0 ? threeNsum / threeNnonZero : 0;
            ave3N.textContent = formatResult(raw3NAve, 4);

            if (std3N) {
              const mean = threeNsum / threeNnonZero || 0;
              const variance =
                threeNvalues.reduce(
                  (acc, val) => acc + Math.pow(val - mean, 2),
                  0
                ) / (threeNnonZero - 1 || 1);
              raw3NstdDev = Math.sqrt(variance);
              const stdDev = raw3NstdDev.toFixed(4);
              std3N.textContent = threeNnonZero > 1 ? stdDev : "-";
            }
            if (rsd3N) {
              if (raw3NstdDev > 0 && raw3NAve > 0) {
                rsd3N.textContent = (
                  (parseFloat(raw3NstdDev) / parseFloat(raw3NAve)) *
                  100
                ).toFixed(1);
              } else rsd3N.textContent = "-";
            }
            //4N STD AVE COMPUTATION
            if (ave4N)
              raw4NAve = fourNnonZero > 0 ? fourNsum / fourNnonZero : 0;
            ave4N.textContent = formatResult(raw4NAve, 4);
            if (std4N) {
              const mean = fourNsum / fourNnonZero || 0;
              const variance =
                fourNvalues.reduce(
                  (acc, val) => acc + Math.pow(val - mean, 2),
                  0
                ) / (fourNnonZero - 1 || 1);
              raw4NstdDev = Math.sqrt(variance);
              const stdDev = raw4NstdDev.toFixed(4);
              std4N.textContent = fourNnonZero > 1 ? stdDev : "-";
            }
            if (rsd4N) {
              if (raw4NstdDev > 0 && raw4NAve > 0) {
                rsd4N.textContent = (
                  (parseFloat(raw4NstdDev) / parseFloat(raw4NAve)) *
                  100
                ).toFixed(1);
              } else rsd4N.textContent = "-";
            }
          });
        } catch (error) {
          console.error("Error during fetching:", error);
        } finally {
          if (loadingEl) loadingEl.style.display = "none"; // ðŸŸ¢ Always hide loading
        }
      };
    }, 500);

    return event;
  });

  // Helper: Date formatting
  function formatDate(date) {
    const mm = date.getMonth() + 1;
    const dd = date.getDate();
    const yy = date.getFullYear().toString().slice(-2);
    const yyyy = date.getFullYear();

    return {
      "mm/dd/yy": `${mm}/${dd}/${yy}`,
      "m/d/yy": `${mm.toString().padStart(2, "0")}/${dd
        .toString()
        .padStart(2, "0")}/${yy}`,
      "m/dd/yy": `${mm.toString().padStart(2, "0")}/${dd}/${yy}`,
      "m/dd/yyyy": `${mm.toString().padStart(2, "0")}/${dd}/${yyyy}`,
      "mm/dd/yyyy": `${mm}/${dd}/${yyyy}`,
    };
  }

  // Helper: Fetch Kintone records
  function fetchRecords(appId, query) {
    return new Promise((resolve, reject) => {
      kintone.api(
        kintone.api.url("/k/v1/records", true),
        "GET",
        { app: appId, query: query },
        (res) => {
          if (!res.records || res.records.length === 0) {
            resolve(null);
            return;
          }
          const record = res.records[0];
          resolve({
            Text: record.Text.value, //analysis lotno
            Type: record.Text_4.value, //mats type/quality
            Number_9: record.Number_9.value, //Sb
            Number: record.Number.value, //Sn
            Number_3: record.Number_3.value, //In
            Number_2: record.Number_2.value, //Cd
            Number_12: record.Number_12.value, //Ag
            Number_13: record.Number_13.value, //Pb
          });
        },
        (err) => reject(err)
      );
    });
  }

  // Helper: Fetch operation string
  async function fetchVoltagePeak(appId, date, group) {
    try {
      const res = await kintone.api(
        kintone.api.url("/k/v1/records", true),
        "GET",
        { app: appId, query: `Date = "${date}"` }
      );

      if (res.records?.length) {
        const record = res.records[0];
        const drNo = record?.extDRNo.value;
        const table = record?.Table_0?.value;
        if (Array.isArray(table)) {
          const found = table.find(
            (row) =>
              row.value.bathGroup_0.value === group &&
              row.value.operation_0.value &&
              row.value.operation_0.value !== "-"
          );
          if (found)
            return {
              drNo: drNo,
              operation: found.value.operation_0.value,
              hasOutput: found.value.hasOutput.value,
              outputQty: found.value.output_0.value,
              temperature: found.value.temperature_0.value,
              targetPeak: found.value.peak_0.value,
              actualPeak: found.value.actualPeak_0.value,
              ampere: found.value.ampere_0.value,
              remarks: found.value.groupRemark.value,
            };
        }
      }
      return null;
    } catch (err) {
      console.error("Error fetching operation:", err);
      return null;
    }
  }

  // Helper: Determine fill color based on type
  function determineFillColor(type) {
    if (type.includes("in")) return "#CBCBFF";
    if (type.includes("2d")) return "#FFFF00";
    if (type.includes("snxv"))
      return "linear-gradient(to right, #add8e6, #ffffcc)";
    if (type.includes("snxc"))
      return "linear-gradient(to right, #99ff99, #ffff99)";
    if (type.includes("sc")) return "#99CC4D";
    if (type.includes("sv")) return "#A3C5E8";
    if (type.includes("5n")) return "#FFC9FF";
    if (type.includes("2n"))
      return "linear-gradient(to right, #FFFF00, #A3CC39)";
    if (type.includes("pb")) return "#FDE3D5";
    return "white";
  }
  //Helper: clear text content, fill, bg of element
  function clear(element) {
    element.textContent = "";
    element.style.background = "none";
    element.style.backgroundColor = "transparent";
  }
  //Helper: Determine Sb efficiency text color
  function getEfficiencyColor(sbValue) {
    const num = parseFloat(sbValue);
    if (isNaN(num)) return "black";
    if (num > 14) return "black";
    if (num > 13) return "blue";
    return "red";
  }
  function formatResult(value, decimals = 4) {
    return value > 0 ? parseFloat(value).toFixed(decimals) : "-";
  }
  function checkPointOne(value) {
    return parseFloat(value) >= 0.01 ? "red" : "black";
  }
})();
